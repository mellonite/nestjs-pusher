(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{84:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return u}));var r=t(3),a=t(7),o=(t(0),t(88)),c={id:"channel-decorator",title:"Channel Decorator"},l={unversionedId:"channel-decorator",id:"channel-decorator",isDocsHomePage:!1,title:"Channel Decorator",description:"Channel Decorator",source:"@site/docs/channel-decorator.md",slug:"/channel-decorator",permalink:"/nestjs-pusher/docs/channel-decorator",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/channel-decorator.md",version:"current",sidebar:"someSidebar",previous:{title:"Client-Side",permalink:"/nestjs-pusher/docs/client-side"},next:{title:"Event Decorator",permalink:"/nestjs-pusher/docs/event-decorator"}},s=[{value:"Channel Decorator",id:"channel-decorator",children:[]},{value:"Basic example",id:"basic-example",children:[]},{value:"Multiple channels",id:"multiple-channels",children:[]},{value:"Channel factory",id:"channel-factory",children:[]}],i={toc:s};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"channel-decorator"},"Channel Decorator"),Object(o.b)("p",null,"This decorator defines which channel nestjs-pusher should send the event to. It also\naccepts a channel builder which passes you the request parameters and allow's you to resolve\nthe final channel endpoint"),Object(o.b)("h2",{id:"basic-example"},"Basic example"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { Controller, Get } from '@nestjs/common';\nimport { PusherChannel } from 'nestjs-pusher';\n\n@Controller('cats')\nexport class CatsController {\n  constructor(private readonly catService: CatService) {\n    //Imaginary service for the sake of the example\n  }\n\n  @PusherChannel('private-channels-of-cats')\n  @Post()\n  async createCat(@Body() dto): string {\n    const newCat = await this.catService.create(dto)\n    //The return value will be used as the content\n    return newCat\n  }\n}\n")),Object(o.b)("h2",{id:"multiple-channels"},"Multiple channels"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { Controller, Get } from '@nestjs/common';\nimport { PusherChannel } from 'nestjs-pusher';\n\n@Controller('cats')\nexport class CatsController {\n  constructor(private readonly catService: CatService) {\n    //Imaginary service for the sake of the example\n  }\n\n  @PusherChannel(['private-channels-of-cats', 'cats-blog', 'etc etc'])\n  @Post()\n  async createCat(@Body() dto): string {\n    const newCat = await this.catService.create(dto)\n    //The return value will be used as the content\n    return newCat\n  }\n}\n")),Object(o.b)("h2",{id:"channel-factory"},"Channel factory"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"NOTE")," You can pass an inline function, but I'll pass a reference so this example can be\neasily understandable"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { Controller, Get } from '@nestjs/common';\nimport { PusherChannel } from 'nestjs-pusher';\n\nconst catCreatedChannelBuilder = (req: RequestInterface, eventName: string) => {\n  //You can perform whatever logic you want, the request is injected as the 1st parameter\n  return eventName + '-final'\n}\n\n@Controller('cats')\nexport class CatsController {\n  constructor(private readonly catService: CatService) {\n    //Imaginary service for the sake of the example\n  }\n\n  @PusherChannel(catCreatedChannelBuilder)\n  @Post()\n  async createCat(@Body() dto): string {\n    const newCat = await this.catService.create(dto)\n    //The return value will be used as the content\n    return newCat\n  }\n}\n")))}u.isMDXComponent=!0},88:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=a.a.createContext({}),u=function(e){var n=a.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return a.a.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},h=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),p=u(t),h=r,m=p["".concat(c,".").concat(h)]||p[h]||d[h]||o;return t?a.a.createElement(m,l(l({ref:n},i),{},{components:t})):a.a.createElement(m,l({ref:n},i))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,c=new Array(o);c[0]=h;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var i=2;i<o;i++)c[i]=t[i];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"}}]);